AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  Username: {Type: String}
Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code: {S3Bucket: some-bucket, S3Key: abcd}
      Environment:
        USERNAME: {Ref: Username}
      Handler: index.handler
      Role:
        Fn::GetAtt: [LambdaExecutionRole, Arn]
      Runtime: nodejs8.10
  ServerlessFunction:
    Type: AWS::Serverless::Function
    Properties: {CodeUri: 's3://some-bucket/abcd'}
  ServerlessFunctionS3:
    Type: AWS::Serverless::Function
    Properties: {CodeUri: 's3://bucket/func'}
  ServerlessFunctionWithoutCode:
    Type: AWS::Serverless::Function
    Properties: {Test: test, CodeUri: 's3://some-bucket/abcd'}
  CloudFormationStack:
    Type: AWS::CloudFormation::Stack
    Properties: {TemplateURL: 'https://s3.amazonaws.com/abcd'}
  ServerlessApi:
    Type: AWS::Serverless::Api
    Properties: {Test: test}
  Test:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Join:
          - .
          - [a, b, c]
        S3Key: test
      Handler: index.handler
      Runtime: nodejs8.10
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: ['logs:*']
            Resource: arn:aws:logs:*:*:*
Outputs:
  AccessNestedStackOutput:
    Value:
      Fn::GetAtt:
        - CloudFormationStack
        - Outputs.LambdaFunctionName
